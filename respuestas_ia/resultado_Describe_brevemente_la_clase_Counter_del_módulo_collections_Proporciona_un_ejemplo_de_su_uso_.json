{
  "question": "Describe brevemente la clase Counter del módulo collections. Proporciona un ejemplo de su uso.",
  "answer": "\nClase Counter del módulo collections es una clase que se utiliza para contar la cantidad de elementos en un iterable, como una lista o un conjunto. También permite mantener el orden de los elementos y sus contadores cuando se modifican los elementos originales.\n\nPor ejemplo, consideremos una lista de frutas:\n```python\nfrutas = [\"apple\", \"banana\", \"pear\", \"apple\"]\n```\nSi queremos contar la cantidad de apples en la lista, podemos crear un objeto Counter y llamar al método `count()` con el elemento \"apple\":\n```python\nfrom collections import Counter\n\ncounter = Counter(frutas)\nprint(counter[\"apple\"])  # Output: 2\n```\nEn este ejemplo, se crea un objeto de tipo Counter llamado `counter` con la lista `frutas`. Luego, se utiliza el método `count()` para contar la cantidad de elementos que coincidan con el valor \"apple\". El output es 2, lo que indica que hay dos apples en la lista.\n\nAdemás, si queremos modificar los elementos originales, Counter permite mantener el orden y los contadores. Por ejemplo, si queremos eliminar las dos apples de la lista:\n```python\nfrutas = [\"apple\", \"banana\", \"pear\", \"apple\"]\n\nfor fruta in frutas:\n    if fruta == \"apple\":\n        frutas.remove(fruta)\n\ncounter = Counter(frutas)\nprint(counter[\"apple\"])  # Output: 0\n```\nEn este ejemplo, se utiliza un bucle for para eliminar las dos apples de la lista `frutas`. Luego, se crea un objeto Counter y llamar al método `count()` con el elemento \"apple\". El output es 0, lo que indica que hay cero apples en la lista modificada.\n\nEn general, la clase Counter del módulo collections es una herramienta muy útil para contar y mantener el orden de los elementos en una lista o un conjunto.",
  "score": 1.0
}