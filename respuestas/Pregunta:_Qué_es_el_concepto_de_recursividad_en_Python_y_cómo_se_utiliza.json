{
  "question": "Pregunta: ¿Qué es el concepto de recursividad en Python y ¿cómo se utiliza?",
  "answer": "\nRecursividad en Python es un técnica de programación en la que una función llama a sí misma dentro de sí misma, hasta que se cumplen las condiciones para terminar la recursión. Recursividad puede ser muy útil para resolver problemas iterativos o para implementar algoritmos de búsqueda y optimización.\n\nPara utilizar recursividad en Python, se necesita definir una función que llame a sí misma dentro de sí misma. La función debe tener un parámetro y una condición para terminar la recursión. Además, se deben definir las funciones auxiliares o helper functions que ayudan a la recursividad.\n\nUn ejemplo simple de recursividad en Python es el algoritmo de fibonacci:\n```python\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\nprint(fibonacci(5)) # Output: 8\n```\nEn este ejemplo, la función `fibonacci()` se llama a sí misma dos veces dentro de sí misma y devuelve la suma de los últimos dos números en la serie Fibonacci. La condición para terminar la recursión es cuando `n <= 1`, en cuyo caso, devuelve `n`.\n\nEs importante señalar que recursividad no está disponible en todos los casos y puede ser ineficiente para problemas de tamaño grande. Además, se debe tener cuidado al usar recursividad para evitar una pila infinita."
}