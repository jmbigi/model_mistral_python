{
  "question": "¿Cómo se pueden crear funciones anónimas en Python?",
  "answer": "\nFunciones anónimas en Python se crean mediante la palabra clave \"lambda\". Las funciones anónimas son funciones cortas, que se definen dentro de otra función o dentro de un bloque de código. Ellas no tienen un nombre y su definición se realiza dentro de paréntesis.\n\nPor ejemplo, una función anónima que suma dos números podría ser definida de la siguiente manera:\n```scss\nresult = lambda x, y: x + y\nprint(result(2, 3)) # Output: 5\n```\nEn este ejemplo, \"lambda x, y: x + y\" define una función anónima que suma los valores de `x` y `y`. La función se asigna a la variable `result`, y su definición se realiza dentro de paréntesis. El resultado de la función es el valor `5`, cuando se invoca con los argumentos `2` y `3`.\n\nFunciones anónimas pueden también recibir parámetros opcionales, como en este ejemplo:\n```scss\nresult = lambda x, y=1: x + y\nprint(result()) # Output: 1\nprint(result(2)) # Output: 3\nprint(result(2, 3)) # Output: 5\n```\nEn este ejemplo, la función anónima reciba dos parámetros `x` y `y`, con `y` siendo opcional. La definición de la función se realiza dentro de paréntesis, y el valor del parámetro `y` se asigna a 1 si no se proporciona ningún valor para él.\n\nFunciones anónimas son útiles cuando se quiere crear funciones cortas o cuando se quiere evitar la definición de una función con un nombre. Ellas también se pueden utilizar como argumentos de otras funciones, o como elementos de listas y diccionarios."
}