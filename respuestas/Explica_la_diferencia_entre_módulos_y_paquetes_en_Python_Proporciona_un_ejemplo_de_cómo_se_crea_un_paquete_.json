{
  "question": "Explica la diferencia entre módulos y paquetes en Python. Proporciona un ejemplo de cómo se crea un paquete.",
  "answer": "\nMódulos y paquetes son dos conceptos importantes en Python que se utilizan para organizar código.\n\nUn módulo es una unidad de código que puede ser importada en otro programa y reutilizado. Módulos generalmente contienen funciones o clases que pueden ser llamadas desde otros partes del código. Por ejemplo, el módulo `math` es un módulo estándar de Python que proporciona funciones matemáticas como `sqrt`, `sin`, y `cos`.\n\nUn paquete, por otro lado, es una organización lógica de módulos. Paquetes se crean para separar código relacionado entre sí y evitar nombres de variables o funciones que sean ambigüos en el programa. Un paquete se crea dentro de un directorio con el nombre del paquete y una subdirectorio llamado `__init__.py`. El `__init__.py` es un módulo especial que contiene la definición de las variables, clases o funciones que se vuelven a utilizar en el código.\n\nPor ejemplo, para crear un paquete llamado \"mis\\_funciones\", se crearía una carpeta llamada \"mis\\_funciones\" con un subdirectorio llamado `__init__.py`. Adentro del `__init__.py` se podría definir una función llamada `hola_mundo`:\n```python\ndef hola_mundo():\n    print(\"Hola, mundo!\")\n```\nLuego, si se quería utilizar esta función en otro programa, se podría importar el paquete \"mis\\_funciones\" y la función \"hola\\_mundo\":\n```python\nimport mis_funciones\n\nmis_funciones.hola_mundo()\n```\nEsto imprimiría \"Hola, mundo!\" en la consola.\n\nEn resumen, los módulos son unidades de código reutilizables y los paquetes son una organización lógica de módulos para separar código relacionado entre sí."
}