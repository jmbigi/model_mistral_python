{
  "question": "¿Cómo usar la función `map()` para aplicar una transformación a cada elemento de una lista?",
  "answer": "La función `map()` de Python es una función de aprendizaje muy útil para aplicar una transformación a cada elemento de una lista.\n\nLa sintaxis de la función `map()` es:\n```scss\nmap(func, iterable)\n```\nDonde `func` es una función que se aplica a cada elemento del `iterable`, y `iterable` es una colección (por ejemplo, una lista o un rango de números) de los elementos sobre los cuales se desea aplicar la transformación.\n\nLa función `map()` devuelve una nueva colección de los resultados de la aplicación de la función `func` a cada elemento del `iterable`. El tipo de los elementos de la lista devuelta depende de la función `func`.\n\nPor ejemplo, si tienes una lista de números y quieres aplicar la transformación de cuadrado a cada elemento, puedes usar la función `map()` de la siguiente manera:\n```scss\nnumeros = [1, 2, 3, 4, 5]\nresultados = map(lambda x: x ** 2, numeros)\nprint(resultados)  # Output: [1, 4, 9, 16, 25]\n```\nEn este ejemplo, la función `lambda x: x ** 2` se aplica a cada elemento de la lista `numeros`, y la transformación resultante se almacena en una nueva lista `resultados`.\n\nEspero que esto te ayude a usar la función `map()` para aplicar transformaciones a las listas!"
}