[
  {
    "question": "¿Cuál es la función del código en el módulo saludos?",
    "answer": "\nLa función del código en el módulo saludos es la de mostrar una serie de mensajes de saludo a los usuarios, dependiendo de su nombre. La función se llama `saluda` y recibe como parámetro el nombre del usuario como un argumento. En base a este parámetro, el código selecciona la correspondiente mensaje de saludo y lo imprime en pantalla."
  },
  {
    "question": "¿Cómo se ejecutan las funciones y métodos de los módulos paquete.hola.saludos y paquete.adios.despedidas en el script script.py?",
    "answer": "\nEn el script `script.py`, las funciones y métodos de los paquetes `hola.saludos` y `paquete.adios.despedidas` se ejecutan de la siguiente manera:\n\n1. La función `hola.saludos()` es llamada con el argumento \"Alumno 1\", y devuelve el mensaje de saludo \"¡Hola, Alumno 1!\"\n2. La función `paquete.adios.despedidas(\"Alumno 1\")` es llamada con el argumento \"Alumno 1\", y devuelve la lista de despedidas \"Adiós, Alumno 1\".\n3. El script `script.py` se ejecuta en su totalidad, imprimiendo los mensajes de saludo y despedidas a la pantalla."
  },
  {
    "question": "Menciona tres módulos esenciales de Python según la presentación de la clase.",
    "answer": "\nTres módulos esenciales de Python según la presentación de la clase son:\n\n1. `os`: este módulo proporciona acceso a los recursos del sistema operativo, como el nombre del directorio actual y los nombres de los archivos en ese directorio.\n2. `str`: este módulo proporciona métodos para manipular cadenas de caracteres en Python.\n3. `input`: este módulo proporciona un interfaz de entrada para el usuario, permitiendo ingresar valores a la computadora y devolver los resultados."
  },
  {
    "question": "Describe brevemente la clase Counter del módulo collections. Proporciona un ejemplo de su uso.",
    "answer": "\nClase Counter de módulo collections es una clase que se utiliza para contar la cantidad de veces que se encuentra un elemento en una lista o un iterable. La clase almacena los elementos en el orden en que se encuentran y proporciona métodos para obtener información sobre los elementos, como su valor, su posición, su longitud, etc.\n\nSe puede crear una instancia de la clase Counter a partir de un iterable, por ejemplo:\n```python\nfrom collections import Counter\n\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 2, 3, 4, 5]\ncontador = Counter(numeros)\n```\nLa variable contador ahora es una instancia de la clase Counter y almacena la cantidad de veces que se encuentra cada elemento en la lista numeros. Se puede acceder al valor de un elemento específico utilizando su nombre, por ejemplo:\n```python\nprint(contador['1'])  # Output: 1\nprint(contador['2'])  # Output: 2\n```\nEl método most\\_common() se utiliza para obtener el elemento más común en la lista o el iterable, y su cantidad de veces. Por ejemplo:\n```python\nprint(contador.most_common())\n```\nEsto devolverá una tupla con dos elementos: el elemento más común (en este caso, 2) y la cantidad de veces que se encuentra.\n\nSe puede utilizar la clase Counter también para crear diccionarios de palabras a partir de listas de textos. Por ejemplo:\n```python\nfrom collections import Counter\n\ntexto = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod augue eu lacus dapibus auctor.\"\npalabras = texto.split()\ncontador_palabras = Counter(palabras)\n```\nLa variable contador\\_palabras ahora es una instancia de la clase Counter y almacena la cantidad de veces que se encuentra cada palabra en el texto. Se puede acceder al valor de una palabra específica utilizando su nombre, por ejemplo:\n```python\nprint(contador_palabras['dolor'])  # Output: 1\n```"
  },
  {
    "question": "Explica la utilidad del módulo datetime y muestra un ejemplo de cómo obtener la fecha y hora actual.",
    "answer": "\nEl módulo datetime de Python se utiliza para manipular fechas y horas en el programa. Es un módulo muy útil para trabajar con datos de fechas y horas, ya que proporciona una gran cantidad de métodos para manipularlo.\n\nLa función datetime.now() se utiliza para obtener la fecha y hora actual en el sistema operativo donde se está ejecutando el programa.\n```python\nfrom datetime import datetime\n\ncurrent_time = datetime.now()\nprint(current_time)\n```\nEste código imprime la fecha y hora actual en el formato ISO 8601, que es un formato estándar para representar fechas y horas en computadoras."
  },
  {
    "question": "¿Cuál es el propósito del módulo math en Python? Proporciona ejemplos de al menos dos funciones que ofrece.",
    "answer": "\nEl propósito del módulo math en Python es proporcionar una colección de funciones y constantes matemáticas comunes que pueden ser utilizadas en los programas. Estos funciones abarcan un rango amplio de áreas matemáticas, incluyendo trigonometría, estadística, matriz y vector, funciones especiales, ecuaciones diferenciales, y muchas más.\n\nDos ejemplos de funciones ofrecidas por el módulo math son:\n\n1. sin(x): Esta función calcula el valor del seno de un ángulo en radianes. Por ejemplo:\n```python\nimport math\nprint(math.sin(math.pi / 4))  # Output: 0.70710678118654755\n```\n2. factorial(n): Esta función calcula el factorial de un número natural. Por ejemplo:\n```python\nimport math\nprint(math.factorial(5))  # Output: 120\n```"
  },
  {
    "question": "¿Qué proporciona el módulo random y cómo se puede utilizar para generar contenido aleatorio?",
    "answer": "\nEl módulo random de Python proporciona una serie de funciones que permiten generar valores aleatorios en un rango específico. Estas funciones pueden ser utilizadas para crear contenido aleatorio en varias formas, como listas, tuplas y strings.\n\nPor ejemplo, la función `randint()` se utiliza para generar un valor aleatorio entre dos números enteros, incluidos en el rango especificado. La función `randrange()` es similar a `randint()`, pero permite generar valores aleatorios también entre cero y el valor especificado (excluyendo este último).\n\nOtro ejemplo de uso del módulo random es la función `shuffle()`, que se utiliza para reordenar los elementos de una lista aleatoriamente.\n\nEn general, el módulo random proporciona una serie de herramientas útiles para crear contenido aleatorio en Python, lo cual puede ser muy útil para apoyar el aprendizaje de los alumnos y mantener su interés en la materia."
  },
  {
    "question": "¿Cómo se importan módulos en Python? Proporciona ejemplos de importación simple y con alias.",
    "answer": "\nEn Python, se importan módulos utilizando la palabra clave \"import\" seguida del nombre del módulo. Los módulos pueden ser importados de forma simple o con un alias.\n\nPor ejemplo:\n\n1. Importación simple:\n```python\nimport math\nprint(math.pi)\n```\n2. Importación con alias:\n```python\nimport math as m\nprint(m.pi)\n```"
  },
  {
    "question": "Explica la diferencia entre módulos y paquetes en Python. Proporciona un ejemplo de cómo se crea un paquete.",
    "answer": "\nEn Python, módulos y paquetes son dos tipos de archivos que se utilizan para organizar código. Módulos son archivos que contienen funciones, clases o variables que pueden ser importados en otros programas, mientras que paquetes son módulos que están dentro de una carpeta con el mismo nombre.\n\nLa principal diferencia entre módulos y paquetes es que los módulos no tienen un namespace, por lo que las funciones y variables que se definen en ellos no pueden ser importadas de manera exclusiva por otro programa. En cambio, los paquetes tienen un namespace, por lo que los elementos que se definen dentro de ellas solo pueden ser importados por programas que se encuentren dentro de la misma carpeta o subcarpetas.\n\nPor ejemplo, si queremos crear un paquete llamado \"mis\\_paquete\" con una función llamada \"hola\", debemos crear una carpeta llamada \"mis\\_paquete\" y dentro de ella un archivo llamado \"\\_init\\_.py\". En este último archivo, podríamos definir nuestra función:\n```python\ndef hola():\n    print(\"Hola, mundo!\")\n```\nLuego, podemos importar nuestra función en otro programa de la siguiente manera:\n```python\nfrom mis_paquete import hola\nhola()  # Output: Hola, mundo!\n```\nEn este caso, \"mis\\_paquete\" es el nombre del paquete y \"\\_init\\_.py\" es el nombre de la función principal. El uso de un namespace en los paquetes evita conflictos con otras funciones o variables que se definen con el mismo nombre."
  },
  {
    "question": "Menciona al menos dos librerías ampliamente usadas en Python, describiendo brevemente su propósito.",
    "answer": "\nLibrería: NumPy\nNumPy es una de las librerías más importantes en Python. Su objetivo es proporcionar un conjunto de herramientas para el análisis de datos y la ciencia de la computación. NumPy proporciona arrays, matrices y vectores de datos, que son los tipos de datos más comunes en el procesamiento de datos. También incluye funciones para manipular, calculo y visualización de estos datos.\n\nLibrería: Pandas\nPandas es otra librería ampliamente usada en Python. Su objetivo es proporcionar un conjunto de herramientas para el trabajo con tablas de datos. Pandas incluye dataframes, series y arrays de datos, que son los tipos de datos más comunes en el procesamiento de datos. También incluye funciones para manipular, calculo y visualización de estos datos."
  }
]